name: CI/CD to EC2

on:
  push:
    branches: [ 'dev' ]   # dev 브랜치에 푸시되면 배포(원하시면 변경)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (optional multi-arch)
        uses: docker/setup-qemu-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 (SSH)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/2025_fall_festival_BE || mkdir -p ~/2025_fall_festival_BE && cd ~/2025_fall_festival_BE

            # .env 업데이트 (필요한 환경변수들)
            cat > .env <<EOF
            IMAGE_TAG=${{ github.sha }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=false
            DOMAIN=${{ secrets.DOMAIN }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            RUN_MIGRATIONS=true
            RUN_COLLECTSTATIC=true
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            EOF

            # ECR 로그인 & pull
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

            # Compose 재시작
            docker-compose pull --ignore-pull-failures
            docker-compose up -d --remove-orphans

            # 마이그레이션/collectstatic (또는 entrypoint 로 처리 가능)
            docker-compose exec -T web python manage.py migrate --noinput
            docker-compose exec -T web python manage.py collectstatic --noinput

            # 이미지 정리(옵션)
            docker image prune -af || true
